/******************************************************************
*******************************************************************
********************Written by Sidharth Makhija in 2013.************
********************This code is released AS-IS and you are********
********************free to modify it as per your requirement.******
*******************************************************************
*******************************************************************
 */
// RECIEVER CODE
#include <VirtualWire.h>
int en1 = 5;
int en2 = 6;
int in1 = 7;
int in2 = 8;
int in3 = 9;
int in4 = 10;
int motorPin[] = {5, 6, 7, 8, 9, 10};


void setup()
{
    Serial.begin(9600);	// Debugging only
    Serial.println("setup");

    // Initialise the IO and ISR
    vw_set_ptt_inverted(true); // Required for DR3100
    vw_setup(2000);	 // Bits per sec
    vw_set_rx_pin(2);
    vw_rx_start();       // Start the receiver PLL running

    for (int i = 0; i < 6; i++) 
   {
          pinMode(motorPin[i], OUTPUT);
   }
/*pinMode(en1, OUTPUT);
pinMode(en2, OUTPUT);
pinMode(in1, OUTPUT);
pinMode(in2, OUTPUT);
pinMode(in3, OUTPUT);
pinMode(in4, OUTPUT);*/

   

}

void loop()
{
    uint8_t buf[VW_MAX_MESSAGE_LEN];
    uint8_t buflen = VW_MAX_MESSAGE_LEN;

    if (vw_get_message(buf, &buflen)) // Non-blocking
    {
	int i;

        digitalWrite(13, true); // Flash a light to show received good message
	// Message with a good checksum received, dump it.
	
	
	for (i = 0; i < buflen; i++)
	{
	    Serial.print(buf[i]);
        if(buf[i] == '1')
      {
        forward();
        Serial.println(" = forward");
      }
    if(buf[i] == '2')
      {
        backward();
        Serial.println(" = backward");
      }
        if(buf[i] == '3')
      {
        left();
        Serial.println(" = left");
      }
        if(buf[i] == '5')
      {
        right();
        Serial.println(" = right");
      }
        if(buf[i] == '4')
       {
         stopMotor();
         Serial.println(" = stopped");
       }
	    Serial.print(" ");
	}
	Serial.println("");
        digitalWrite(13, false);

   }
}


////////////////////////////////////////////////////////////////////////////////////////

void forward()
{
  digitalWrite(en1,HIGH);
  digitalWrite(en2,HIGH);
  digitalWrite(in1,HIGH);
  digitalWrite(in2,LOW);
  digitalWrite(in3,LOW);
  digitalWrite(in4,HIGH);
  }
  
  
void backward()
{
  digitalWrite(en1,HIGH);
  digitalWrite(en2,HIGH);
  digitalWrite(in1,LOW);
  digitalWrite(in2,HIGH);
  digitalWrite(in3,HIGH);
  digitalWrite(in4,LOW);
  
}

void left()
{
  digitalWrite(en1,HIGH);
  digitalWrite(en2,HIGH);
  digitalWrite(in1,LOW);
  digitalWrite(in2,LOW);
  digitalWrite(in3,LOW);
  digitalWrite(in4,HIGH);
  delay(1500);
}

void right()
{
  digitalWrite(en1,HIGH);
  digitalWrite(en2,HIGH);
  digitalWrite(in1,HIGH);
  digitalWrite(in2,LOW);
  digitalWrite(in3,LOW);
  digitalWrite(in4,LOW);
  delay(1500);
}

void stopMotor()
{
  digitalWrite(en1,HIGH);
  digitalWrite(en2,HIGH);
  digitalWrite(in1,LOW);
  digitalWrite(in2,LOW);
  digitalWrite(in3,LOW);
  digitalWrite(in4,LOW);
}
  
